{"name":"Complete Virtual Household Environment Tasks","description":"This workflow consists of an agent that proposes actions to take, and debaters that debate whether or not that action is the best. Given the output of the debate, the agent that proposes actions to take is allowed to propose a new action, or stick with its previous action. This process iterates until the task is complete or the agent runs out of moves.","sender":{"type":"userproxy","config":{"name":"userproxy","llm_config":{"config_list":[{"id":"a6fd2c12-c8ca-4971-ae6b-ac1bca88bff3","user_id":"guestuser@gmail.com","timestamp":"2024-02-04T01:06:58.302195","model":"gpt-3.5-turbo-0125","api_key":"********","base_url":null,"api_type":null,"api_version":null,"description":"GPT 3.5 Turbo 0125"}],"temperature":0,"cache_seed":null,"timeout":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":5,"system_message":"Your job is to use the get_next_task skill to retrieve two strings; an example string and a task string. Please use a max_steps value of 3; in other words, pass the value of 3 to the get_next_task skill. You must then give this examples string and task string to the Moderator, who will then tell you whether they were able to complete the task, or not. ","is_termination_msg":null,"code_execution_config":{"work_dir":null,"use_docker":false},"default_auto_reply":""},"id":"833a92a6-9bd2-4f48-a4b4-881934047e7a","timestamp":"2024-02-04T02:06:45.643713","user_id":"default","skills":[{"title":"get_next_task","content":"def get_next_task(max_steps=20):\n    \"\"\"\n    Returns a tuple of strings --- (examples, task). The first string contains examples of successful task completions; these examples showcase all of the valid actions that can be taken; if an action is not in these examples then it is invalid. The second string is the task to be completed.\n\n    :param max_steps: int, the maximum number of steps allowed before the task is deemed a failure.\n    \"\"\"\n    url = f'http://localhost:8000/get_next_task?max_steps={max_steps}'\n\n    response = requests.get(url)\n    json_response = response.json()\n    examples = json_response.get(\"examples\")\n    task = json_response.get(\"task\")\n    task_index = json_response.get(\"task_index\")\n\n    example_str = ''\n    for i, ex in enumerate(examples):\n        example_str += f'Example {i}:\\n{ex}\\n\\n'\n\n    return example_str, task","file_name":null,"id":"015d0755-5a17-4b91-8557-c7eacd6d85f8","description":null,"timestamp":"2024-02-04T01:24:20.679006","user_id":"default"}],"description":"This agent presents a task (along with examples) to complete in a virtual household environment."},"receiver":{"type":"groupchat","config":{"name":"Moderator","llm_config":{"config_list":[{"id":"a6fd2c12-c8ca-4971-ae6b-ac1bca88bff3","user_id":"guestuser@gmail.com","timestamp":"2024-02-04T01:06:58.302195","model":"gpt-3.5-turbo-0125","api_key":"********","base_url":null,"api_type":null,"api_version":null,"description":"GPT 3.5 Turbo 0125"}],"temperature":0,"cache_seed":null,"timeout":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":8,"system_message":"You are a helpful moderator skilled at coordinating a group of other assistants to solve a task. You will be given some examples of successful task completions from the userproxy, followed the the task you must complete. \n\nTo complete this task, you should ask the Virtual Household Environment Explorer (Explorer) which action it would like to take by first providing them with the examples, followed by the task. They should propose an action to take next in the virtual household environment. \n\nNext, you should put this action up for debate by querying Debater Affirm and Debater Negate. Start by giving Debater Affirm the context of the situation, and the proposed action. The context of the situation can be the current state of the Explorer as well as the overall task that needs to be completed. Debater Affirm should then present an argument in favor of that action. \n\nNext, ask Debater Negate what they think about the action, allowing them to respond to Debater Affirm if they so choose. Debater Negate should present an argument (possibly referring to Debater Affirm's argument) why the action is NOT the best action to take. \n\nFinally, you should give this back and forth debate (the 2 arguments presented by Debater Affirm and Debater Negate) to the Explorer and ask them if they would like to propose a different action or stick with the original action they proposed. You must then use the take_environment_action skill to take this (possibly changed) action in the environment. You will receive an observation in response, i.e., the result of the action in the environment. \n\nOverall, you should repeat the above process as many times as necessary to successfully complete the task in the simulated household environment. If you receive an observation from the environment that says you have failed to complete the task, or that you have successfully completed the task, you MUST stop execution, and return to the humanproxy the result of your work.\n\n","is_termination_msg":null,"code_execution_config":null,"default_auto_reply":""},"groupchat_config":{"agents":[{"type":"assistant","config":{"name":"Virtual Household Environment Explorer","llm_config":{"config_list":[{"id":"a6fd2c12-c8ca-4971-ae6b-ac1bca88bff3","user_id":"guestuser@gmail.com","timestamp":"2024-02-04T01:06:58.302195","model":"gpt-3.5-turbo-0125","api_key":"********","base_url":null,"api_type":null,"api_version":null,"description":"GPT 3.5 Turbo 0125"}],"temperature":0,"cache_seed":null,"timeout":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":8,"system_message":"You will be given some examples of previous successful task completions in order to showcase the valid actions you can take. You will then be given a task to complete. Your job is to iteratively take actions in the environment to complete the task. For each action you take, you will be given an observation; i.e., the result of your action.","is_termination_msg":null,"code_execution_config":null,"default_auto_reply":""},"id":"f0ff52ba-d231-4051-ac12-8dafadcd00f3","timestamp":"2024-02-04T01:56:14.940287","user_id":"guestuser@gmail.com","skills":[],"description":"You are an agent inside of a virtual household environment whose job is to take actions to complete tasks."},{"type":"assistant","config":{"name":"Debater Affirm","llm_config":{"config_list":[{"id":"a6fd2c12-c8ca-4971-ae6b-ac1bca88bff3","user_id":"guestuser@gmail.com","timestamp":"2024-02-04T01:06:58.302195","model":"gpt-3.5-turbo-0125","api_key":"********","base_url":null,"api_type":null,"api_version":null,"description":"GPT 3.5 Turbo 0125"}],"temperature":0,"cache_seed":null,"timeout":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":8,"system_message":"You will be presented with an action and some context. Your job is to present the strongest argument for why the action is the best possible action that can be taken given the context. However, you should not present claims that are obviously false, or otherwise present a misleading argument. In summary, do the best you can to argue in good faith that the action is the best given the context.","is_termination_msg":null,"code_execution_config":null,"default_auto_reply":""},"id":"d74e5443-32cd-4111-8d50-64ed15696bd8","timestamp":"2024-02-04T02:01:00.108954","user_id":"guestuser@gmail.com","skills":[],"description":"This agent is a debater whose goal is to present the strongest argument that some action is the best possible action given the context."},{"type":"assistant","config":{"name":"Debater Negate","llm_config":{"config_list":[{"id":"a6fd2c12-c8ca-4971-ae6b-ac1bca88bff3","user_id":"guestuser@gmail.com","timestamp":"2024-02-04T01:06:58.302195","model":"gpt-3.5-turbo-0125","api_key":"********","base_url":null,"api_type":null,"api_version":null,"description":"GPT 3.5 Turbo 0125"}],"temperature":0,"cache_seed":null,"timeout":null},"human_input_mode":"NEVER","max_consecutive_auto_reply":8,"system_message":"You will be presented with an action and some context. Your job is to present the strongest argument for why the action is NOT the best possible action that can be taken given the context, in other words, that there exists an alternative action that is better.. However, you should not present claims that are obviously false, or otherwise present a misleading argument. In summary, do the best you can to argue in good faith that the action is not the best given the context.","is_termination_msg":null,"code_execution_config":null,"default_auto_reply":""},"id":"9c67b746-03e1-45bf-8ea6-6d91c25e677d","timestamp":"2024-02-04T02:02:10.391921","user_id":"guestuser@gmail.com","skills":[],"description":"This agent is a debater whose goal is to present the strongest argument that some action is NOT the best possible action given the context."}],"admin_name":"groupchat_assistant","messages":[],"max_round":10,"speaker_selection_method":"auto","allow_repeat_speaker":false},"id":"a15fa081-35ea-487b-8022-3f838f4723f0","timestamp":"2024-02-04T02:06:45.643713","user_id":"default","description":"This agent controls the communication between an action-taker and 2 debaters in order to take actions to complete some task.","skills":[{"title":"take_environment_action","content":"\ndef take_environment_action(action: str) -> str:\n    \"\"\"\n    Takes an action in the simulated household environment.\n\n    :param action: str, the action to take in the simulated household environment.\n    \"\"\"\n\n    url = 'http://localhost:8000/take_action'\n    data = {\n        \"action\": action\n    }\n\n    response = requests.post(url, json=data)\n    json_response = response.json()\n    observation = json_response.get(\"observation\")\n    done = json_response.get(\"done\")\n    reward = json_response.get(\"reward\")\n\n    if done:\n        if reward:\n            observation = \"You have successfully completed the task!\"\n        else:\n            observation = \"You have run out of moves. You have failed to complete the task.\"\n\n    return observation\n\n","file_name":null,"id":"49c8ab57-8d6f-4f5c-a7c8-454d2c73f09f","description":null,"timestamp":"2024-02-04T01:22:41.424793","user_id":"default"}]},"type":"groupchat","id":"dbe8eb0e-7b5e-4533-a051-9265ee3e2834","user_id":"default","timestamp":"2024-02-04T02:06:45.643713","summary_method":"last"}